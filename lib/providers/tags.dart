import 'package:birthday_reminder/helpers/db_helper.dart';
import 'package:birthday_reminder/screens/home_screen.dart';
import 'package:flutter/cupertino.dart';

import '../models/tag.dart';

class Tags with ChangeNotifier {
  List<Tag> _tags = [
    Tag(id: 0, name: 'Family'),
    Tag(id: 1, name: 'Friends'),
    Tag(id: 2, name: 'Work'),
    Tag(id: 3, name: 'Others'),
  ];

  List<Tag> get tags {
    /* _tags.sort(
      (a, b) => a.id.compareTo(b.id),
    ); */
    return [..._tags];
  }

  Tag aniversariFromId(int id) {
    return _tags.firstWhere((aniversari) => aniversari.id == id);
  }

  Future<void> addTag(
      String name,
      ) async {
    final mapGuardar = {
      'name': name,
    };
    await DBHelper.insert('tags', mapGuardar).then((autogeneratedId) {
      final newTag = Tag(
        id: autogeneratedId,
        name: name,
      );
      _tags.add(newTag);
    });
    notifyListeners();
  }

  Future<void> removeTag(int id) async {
    await DBHelper.remove('tags', id).then((_) {
      int indexToReplace = _tags.indexWhere((element) => element.id == id);
      _tags.removeAt(indexToReplace);
    });

    notifyListeners();
  }

  Future<void> editTag(
      int id,
      String name,
      ) async {
    final mapGuardar = {
      'name': name,
    };

    await DBHelper.update('tags', mapGuardar, id).then((_) {
      final updatedTag = Tag(
        id: id,
        name: name,
      );
      int indexToReplace = _tags.indexWhere((element) => element.id == id);
      _tags.removeAt(indexToReplace);
      _tags.insert(indexToReplace, updatedTag);
    });

    notifyListeners();
  }

  Future<void> fetchAndSetTags(orderAniversariBy orden) async {
    final dataList = await DBHelper.getData('tags');
    _tags = dataList.map(
          (item) {
        return Tag(
          id: item['id'],
          name: item['name'],
        );
      },
    ).toList();
    notifyListeners();
  }
}